//@version=4
strategy(title="Diamond Hands", shorttitle="Diamond Hands", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_value=0.15)

FromMonth = input(defval=1, title="From Month", minval=1, maxval=12)
FromDay = input(defval=1, title="From Day", minval=1, maxval=31)
FromYear = input(defval=2017, title="From Year", minval=2015)
ToMonth = input(defval=1, title="To Month", minval=1, maxval=12)
ToDay = input(defval=1, title="To Day", minval=1, maxval=31)
ToYear = input(defval=9999, title="To Year", minval=2017)

start = timestamp(FromYear, FromMonth, FromDay, 00, 00)
finish = timestamp(ToYear, ToMonth, ToDay, 23, 59)
testPeriod() =>
    time >= start and time <= finish ? true : false

f_highest_sr(_source, _length) =>
    float _return = _source
    for _i = 0 to max(0, min(_length, bar_index)-1)
        _return := max(_source[_i], _return)
    _return
    
f_lowest_sr(_source, _length) => 
    float _return = _source
    for _i = 0 to max(0, min(_length, bar_index)-1)
        _return := min(_source[_i], _return)
    _return

f_barssince(_cond, _count) => _barssince=bar_index-valuewhen(_cond, bar_index, _count)

//---------------options
n=1
numbars=1
up = high[n+1]<high[n] and high[n]>high
down = low[n+1]>low[n] and low[n]<low
lookback = input(48, title="check lowest swing low in x bars back")


//Break conditions

downlow= valuewhen(down, low[numbars], 0)
downlow2 = valuewhen(down, low[numbars], 1)
downlow3 = valuewhen(down, low[numbars], 2)
downlow4 = valuewhen(down, low[numbars], 3)
lowdownlow = lowest(downlow, lookback)
bearbreak = (open>downlow and close<downlow and close<low[1])
bearbreak2 =(open>lowdownlow and close<lowdownlow and close<low[1])


//-------------------

uphigh = valuewhen(up, high[numbars], 0)
uphigh2 = valuewhen(up, high[numbars], 1)
uphigh3 = valuewhen(up, high[numbars], 2)
uphigh4 = valuewhen(up, high[numbars], 3)
highuphigh =highest(uphigh, lookback)
bullbreak = (open<uphigh and close>uphigh and close>high[1])
bullbreak2 = (open<highuphigh and close>highuphigh and close>high[1])

downlow_(num)=> valuewhen(down, low[numbars], num)

downlow1 = downlow_(0)
downlow1_2 = min(downlow_(0), downlow_(1))
downlow1_3 = min(downlow_(0), downlow_(1), downlow_(2))
downlow1_4 = min(downlow_(0), downlow_(1), downlow_(2), downlow_(3))
downlow1_5 = min(downlow_(0), downlow_(1), downlow_(2), downlow_(3), downlow_(4))
downlow1_6 = min(downlow_(0), downlow_(1), downlow_(2), downlow_(3), downlow_(4), downlow_(5))


bearbreak_(lvl) => (open>lvl and close<lvl and close<low[1])
bear1 = bearbreak_(downlow1)
bear2 = bearbreak_(downlow1_2)
bear3 = bearbreak_(downlow1_3)
bear4 = bearbreak_(downlow1_4)
bear5 = bearbreak_(downlow1_5)
bear6 = bearbreak_(downlow1_6)
bearcol = (bear1 or bear2 or bear3 or bear4 or bear5 or bear6) 

uphigh_(num)=> valuewhen(up, high[numbars], num)

uphigh1 = uphigh_(0)
uphigh1_2 = max(uphigh_(0), uphigh_(1))
uphigh1_3 = max(uphigh_(0), uphigh_(1), uphigh_(2))
uphigh1_4 = max(uphigh_(0), uphigh_(1), uphigh_(2), uphigh_(3))
uphigh1_5 = max(uphigh_(0), uphigh_(1), uphigh_(2), uphigh_(3), uphigh_(4))
uphigh1_6 = max(uphigh_(0), uphigh_(1), uphigh_(2), uphigh_(3), uphigh_(4), uphigh_(5))

highestup(num) => f_highest_sr(close, f_barssince(up, num))

bullbreak_(lvl) => (open<lvl and close>lvl and close>high[1])
bull1 = bullbreak_(uphigh1)
bull2 = bullbreak_(uphigh1_2) 
bull3 = bullbreak_(uphigh1_3)
bull4 = bullbreak_(uphigh1_4)
bull5 = bullbreak_(uphigh1_5)
bull6 = bullbreak_(uphigh1_6)
bullcol = bull1 or bull2 or bull3 or bull4 or bull5 or bull6





//HA plot
handleHA = heikinashi(syminfo.tickerid)
openHA = security(handleHA, timeframe.period, open)
highHA = security(handleHA, timeframe.period, high)
lowHA = security(handleHA, timeframe.period, low)
closeHA = security(handleHA, timeframe.period, close)
src = openHA

/////trendmaster
Factor = input(16, minval=1, maxval=140)
Pd = input(1, minval=1, maxval=140)
Up = closeHA - Factor * atr(Pd)
Dn = closeHA + Factor * atr(Pd)
TrendUp = float(na)
TrendUp := closeHA[1] > TrendUp[1] ? max(Up, TrendUp[1]) : Up
TrendDown = float(na)
TrendDown := closeHA[1] < TrendDown[1] ? min(Dn, TrendDown[1]) : Dn
Trend = int(na)
Trend := closeHA > TrendDown[1] ? 1 : closeHA < TrendUp[1] ? -1 : nz(Trend[1], 1)
Tsl = Trend == 1 ? TrendUp : TrendDown
linecolor = Trend == 1 ? color.green : color.red
plot(Tsl, color=linecolor, style=plot.style_line, linewidth=2, title="SuperTrend")

//Stop runs
lookbacklength = input(20, minval=1, step=5, title="stop run lookback length")


// Put your long and short rules here
longCondition = low < lowest(low, lookbacklength)[1] and 
   close > lowest(close[1], lookbacklength) and not na(close[lookbacklength]) and 
   close > Tsl

shortCondition = high > highest(high, lookbacklength)[1] and 
   close < highest(close[1], lookbacklength) and not na(close[lookbacklength]) and 
   close < Tsl

long=low<lowest(low, lookbacklength)[1] and close>lowest(close[1], lookbacklength) and not na(close[lookbacklength]) 

short=high>highest(high, lookbacklength)[1] and close<highest(close[1], lookbacklength) and not na(close[lookbacklength])
tplong = close<f_lowest_sr(close, 30)
tpshort = close>f_highest_sr(close, 30)


longClose = crossunder(close, Tsl)
shortClose = crossover(close, Tsl)


//SL

stopLow = float(na)
stopHigh = float(na)
if longCondition and strategy.position_size <= 0 or shortCondition and strategy.position_size >= 0
    stopLow := low
    stopHigh := high
    stopHigh
else
    if strategy.position_size == 0
        stopLow := na
        stopHigh := na
        stopHigh
    else
        stopLow := stopLow[1]
        stopHigh := stopHigh[1]
        stopHigh

dynStop = input(true, title='Dynamic stop', type=input.bool)
if dynStop and not(longCondition or shortCondition or longClose or shortClose)
    strategy.exit("Dynamic Stop Loss (Long)", "Long", stop=stopLow)
    strategy.exit("Dynamic Stop Loss (Short)", "Short", stop=stopHigh)
else
    strategy.cancel("Dynamic Stop Loss (Long)")
    strategy.cancel("Dynamic Stop Loss (Short)")
    
//Position size calculator 
accountrisk= input(1, title="Account % risk: ", step=0.1)
sizelong= strategy.equity*accountrisk/100/abs(close-low)
sizeshort= strategy.equity*accountrisk/100/abs(high-close)

//Custom orders
//tppercentsize= input(50, title="Take profit percent size")




if testPeriod()
    strategy.entry("Long", 1, qty=sizelong,  when=longCondition)
    strategy.entry("Short", 0,qty=sizeshort, when=shortCondition)
    strategy.close("Long", when=longClose)
    strategy.close("Short", when=shortClose)
